{"version":3,"sources":["modules/components/FormSlider.tsx","modules/components/ColorEdit.tsx","modules/funnel/CanvasFunnel.tsx","modules/funnel/DataTable.tsx","modules/funnel/Download.tsx","modules/funnel/EditableElement.tsx","modules/funnel/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FormSlider","max","min","value","label","onChange","className","span","e","isNaN","target","ColorEdit","clear","timer","type","clearTimeout","color","window","setTimeout","hex","onClick","CanvasFunnel","style","baseHeight","baseWidth","bgPadding","itemColor","marginBetween","innerFontSize","lastWidth","title","baseX","baseY","items","setEditableElement","editableElement","funnelElements","useState","context","setContext","currentActiveElement","setActiveElement","baseColor","result","exec","parseInt","hexToRgb","useEffect","canvas","document","getElementById","getContext","clearRect","width","height","drawScaled","forEach","element","i","drawScaledItem","drawMainText","item","drawPercents","drawTitle","drawMainPercent","drawActiveElement","drawEditableBorder","font","textAlign","fillStyle","fillText","beginPath","bgColor","counter","newColor","map","Math","round","getColor","moveTo","point1","x","y","lineTo","point2","point3","point4","fill","textY","textColor","toString","labelColor","textX","length","textLength","measureText","lineStart","lineEnd","strokeStyle","stroke","drawBorder","mousePosition","data","getBoundingClientRect","clientX","left","clientY","top","activeElement","position","active","id","onMouseMove","DataTable","setElement","handleLabelChange","newItems","handleValueChange","key","splice","handleDelete","danger","push","Download","name","setName","node","toPng","then","dataUrl","a","createElement","href","download","click","EditableElement","index","colorChange","field","newItem","FunnelWrapper","funnel","setFunnel","setBaseWidth","setLastWidth","setBaseHeight","setItemColor","setBgColor","setBgPadding","setMargin","setInnerFontSize","setTitle","setFunnelElements","minusWidth","currentMargin","transform","elements","placeholder","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4ac2c8a8.chunk.js","sourcesContent":["import { Slider, Row, Col, Input } from 'antd';\r\nimport React, { ChangeEvent }                   from 'react';\r\n\r\ninterface Props {\r\n    max: number;\r\n    min: number;\r\n    value: number;\r\n    label: string;\r\n    onChange: (value: number) => void\r\n}\r\n\r\nconst FormSlider = ({ max, min, value, label, onChange}: Props) => {\r\n    const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (isNaN(+e.target.value)) return;\r\n\r\n        onChange(+e.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"form__group\">\r\n            <label className=\"label\">\r\n                {label}\r\n            </label>\r\n\r\n            <Row>\r\n                <Col span={20}>\r\n                    <Slider\r\n                        value={value}\r\n                        onChange={(value: number) => onChange(value)}\r\n                        max={max}\r\n                        min={min}\r\n                    />\r\n                </Col>\r\n                <Col span={4}>\r\n                    <Input\r\n                        min={min}\r\n                        max={max}\r\n                        value={value}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FormSlider;","import React, { ChangeEvent } from 'react';\r\nimport { Button } from 'antd';\r\n\r\ninterface ChangeData {\r\n    hex: string | null\r\n}\r\n\r\ninterface Props {\r\n    label: string;\r\n    onChange: (data: ChangeData) => void;\r\n    value: string | null;\r\n    clear?: string;\r\n}\r\n\r\nconst ColorEdit = ({ label, onChange, value, clear }: Props) => {\r\n    let timer = -1;\r\n\r\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        clearTimeout(timer);\r\n        const color = e.target.value;\r\n        timer = window.setTimeout(\r\n            () => onChange({ hex: color }),\r\n            20\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"form__group\">\r\n            <label className=\"label\">\r\n                {label}\r\n            </label>\r\n\r\n            <div className=\"form__color\">\r\n\r\n                <input\r\n                    type=\"color\"\r\n                    onChange={handleChange}\r\n                    value={value || ''}\r\n                />\r\n                <span className=\"form__color__value\">\r\n                    {value}\r\n                </span>\r\n\r\n                {clear &&\r\n                <Button onClick={() => onChange({ hex: null })}>{clear}</Button>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ColorEdit;","import React, { useEffect, useState } from 'react';\r\nimport { Funnel, FunnelElement, FunnelProps } from './funnel';\r\n\r\nconst CanvasFunnel =\r\n    ({\r\n         style: {\r\n             baseHeight, baseWidth, bgPadding, itemColor, marginBetween, lastWidth, innerFontSize, title, baseX, baseY\r\n         },\r\n         items,\r\n         setEditableElement,\r\n         editableElement,\r\n        funnelElements\r\n    }: FunnelProps) => {\r\n\r\n    const [context, setContext] = useState<CanvasRenderingContext2D | null>(null);\r\n    const [currentActiveElement, setActiveElement] = useState<number | null>(null);\r\n    const baseColor = hexToRgb(itemColor!);\r\n\r\n    useEffect(() => {\r\n        const canvas = document.getElementById('funnelCanvas') as HTMLCanvasElement;\r\n        setContext(canvas.getContext('2d'));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        clear();\r\n        drawScaled();\r\n    });\r\n\r\n    function hexToRgb(hex: string) {\r\n        let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        return result ?\r\n            [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)] : [255, 255, 255];\r\n    }\r\n\r\n    const getColor = (counter: number) => {\r\n        const newColor = baseColor.map(i => i - Math.round((i / 100 * (counter * 5))));\r\n        return `rgb(${newColor[0]}, ${newColor[1]}, ${newColor[2]})`;\r\n    }\r\n\r\n    function clear() {\r\n        if (!context) return;\r\n        const canvas = document.getElementById('funnelCanvas') as HTMLCanvasElement;\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n\r\n    const drawScaled = () => {\r\n        if (!context || !items[0]) return;\r\n\r\n        funnelElements.forEach((element, i) => {\r\n            drawScaledItem(element, i);\r\n            drawMainText(element, i);\r\n        });\r\n\r\n        items.forEach((item, i) => {\r\n            drawPercents(item, i);\r\n        });\r\n\r\n        drawTitle();\r\n        drawMainPercent();\r\n        drawActiveElement();\r\n        drawEditableBorder();\r\n    }\r\n\r\n    const drawTitle = () => {\r\n        if (!context) return;\r\n\r\n        context.font = `${innerFontSize}px Tahoma`;\r\n        context.textAlign = \"center\";\r\n        context.fillStyle = 'black';\r\n        context.fillText(title, baseX + baseWidth / 2, bgPadding + innerFontSize);\r\n    }\r\n\r\n    const drawScaledItem = (element: FunnelElement, i: number) => {\r\n        if (!context) return;\r\n\r\n        context.beginPath();\r\n        context.fillStyle = element.bgColor || getColor(i);\r\n        context.moveTo(element.point1.x, element.point1.y);\r\n        context.lineTo(element.point2.x, element.point2.y);\r\n        context.lineTo(element.point3.x, element.point3.y);\r\n        context.lineTo(element.point4.x, element.point4.y);\r\n        context.fill();\r\n    }\r\n\r\n    const drawMainText = (item: FunnelElement, i: number) => {\r\n        if (!context) return;\r\n        const textY = baseY + (baseHeight * i) + (baseHeight + innerFontSize - 4) / 2;\r\n\r\n        context.font = `${innerFontSize}px Tahoma`;\r\n        context.textAlign = \"center\";\r\n        context.fillStyle = item.textColor || 'black';\r\n        context.fillText(item.value.toString(), baseX + (baseWidth / 2),  textY + (marginBetween * i));\r\n\r\n        if (item.label) {\r\n            context.textAlign = \"left\";\r\n            context.fillStyle = item.labelColor || 'black';\r\n            context.fillText(item.label, baseX + (baseWidth) + 30, textY + (marginBetween * i))\r\n        }\r\n    }\r\n\r\n    const drawPercents = (item: Funnel, i: number) => {\r\n        if (!context || i === 0 || !item.value || !items[i - 1].value) return;\r\n\r\n        const textY = baseY + (baseHeight * i) + (baseHeight + innerFontSize - 4) / 2 + (marginBetween * i);\r\n        const textX = baseX - 20;\r\n\r\n        context.font = `${innerFontSize}px Tahoma`;\r\n        context.textAlign = \"start\";\r\n        context.fillStyle = 'black';\r\n        context.fillText(`${Math.round(100 / items[i - 1].value * item.value)} %`, textX,  textY);\r\n    }\r\n\r\n    const drawMainPercent = () => {\r\n        if (!context || items.length === 0 || !items[0].value || !items[items.length - 1].value) return;\r\n\r\n        const value = Math.round(100 / items[0].value * items[items.length - 1].value);\r\n\r\n        context.font = `${innerFontSize}px Tahoma`;\r\n        context.textAlign = \"start\";\r\n        context.fillStyle = 'black';\r\n        context.fillText(`${value} %`, bgPadding,  baseY + (items.length * baseHeight + marginBetween * items.length) / 2);\r\n\r\n        const textLength = context.measureText(`${value} %`).width;\r\n        const lineStart = baseY + (baseHeight / 2);\r\n        const lineEnd = baseY + items.length * baseHeight - (baseHeight / 2) + (marginBetween * (items.length - 1));\r\n\r\n        context.beginPath();\r\n        context.strokeStyle = 'black';\r\n        context.moveTo(bgPadding + textLength + 16, lineStart);\r\n        context.lineTo(bgPadding + textLength + 8, lineStart);\r\n        context.lineTo(bgPadding + textLength + 8, lineEnd);\r\n        context.lineTo(bgPadding + textLength + 16, lineEnd);\r\n        context.stroke();\r\n    }\r\n\r\n    const drawBorder = (i: number, color: string) => {\r\n        if (!context) return;\r\n\r\n        const element = funnelElements[i];\r\n\r\n        context.beginPath();\r\n        context.strokeStyle = color;\r\n        context.moveTo(element.point1.x - 1, element.point1.y - 1);\r\n        context.lineTo(element.point2.x + 1, element.point2.y - 1);\r\n        context.lineTo(element.point3.x + 1, element.point3.y - 1);\r\n        context.lineTo(element.point4.x - 1, element.point4.y - 1);\r\n        context.lineTo(element.point1.x - 1, element.point1.y - 1);\r\n        context.stroke();\r\n    }\r\n\r\n    const drawActiveElement = () => {\r\n        if (currentActiveElement === null || !context) return;\r\n        drawBorder(currentActiveElement, 'black');\r\n    }\r\n\r\n    const drawEditableBorder = () => {\r\n        if (editableElement === null || !context) return;\r\n        drawBorder(editableElement, 'red');\r\n    }\r\n\r\n    const handleMouseMove = (e: React.MouseEvent) => {\r\n        if (!context) return;\r\n        let active = activeElement(mousePosition({ clientX: e.clientX, clientY: e.clientY }));\r\n        if (active !== currentActiveElement)\r\n            setActiveElement(active);\r\n    }\r\n\r\n    const handleClick = (e: React.MouseEvent) => {\r\n        if (currentActiveElement || !editableElement || editableElement !== currentActiveElement) {\r\n            setEditableElement(currentActiveElement);\r\n        }\r\n    }\r\n\r\n    const mousePosition = (data: { clientX: number, clientY: number}) => {\r\n        const canvas = document.getElementById('funnelCanvas')!.getBoundingClientRect();\r\n\r\n        return {\r\n            x: data.clientX - canvas.left,\r\n            y: data.clientY - canvas.top\r\n        }\r\n    }\r\n\r\n    const activeElement = (position:  { x:number, y: number}) => {\r\n        let active = null;\r\n\r\n        funnelElements.forEach((item: any, i: number) => {\r\n            if (position.x >= item.point1.x && position.x <= item.point2.x\r\n                && position.y >= item.point1.y && position.y <= item.point3.y)\r\n                active = i;\r\n        });\r\n\r\n        return active;\r\n    }\r\n\r\n    return (\r\n        <div className=\"funnel-canvas__wrapper\">\r\n            <canvas\r\n                id=\"funnelCanvas\"\r\n                className=\"funnel-canvas\"\r\n                width={baseWidth + (bgPadding * 2) + 400}\r\n                height={bgPadding * 2 + baseHeight * items.length + 50 + marginBetween * items.length }\r\n                onMouseMove={handleMouseMove}\r\n                onClick={handleClick}\r\n            ></canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CanvasFunnel;","import React, { useState } from 'react';\r\nimport { Funnel }          from './funnel.d';\r\nimport { Input, Button } from 'antd';\r\n\r\ninterface Props {\r\n    onChange: (items: Funnel[]) => void,\r\n    items: Funnel[]\r\n}\r\n\r\nconst DataTable = ({ items, onChange }: Props) => {\r\n    const [element, setElement] = useState({\r\n        value: 0,\r\n        label: ''\r\n    });\r\n\r\n    const handleLabelChange = (value: string, i: number) => {\r\n        const newItems = [...items];\r\n        newItems[i].label = value;\r\n        onChange(newItems);\r\n    }\r\n\r\n    const handleValueChange = (value: number, i: number) => {\r\n        const newItems = [...items];\r\n        newItems[i].value = value;\r\n        onChange(newItems);\r\n    }\r\n\r\n    const handleDelete = (i: number) => {\r\n        const newItems = [...items];\r\n        newItems.splice(i, 1);\r\n        onChange(newItems);\r\n    }\r\n\r\n    const handleAddElement = () => {\r\n        const newItems = [...items];\r\n        newItems.push(element);\r\n        onChange(newItems);\r\n        setElement({value: 0, label: ''});\r\n    }\r\n\r\n    return (\r\n        <div className=\"data-table\">\r\n            <table className=\"table\">\r\n                <thead>\r\n                <tr>\r\n                    <th>\r\n                        Значение\r\n                    </th>\r\n                    <th>\r\n                        Лэйбл\r\n                    </th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {items.map((item, i) =>\r\n                    <tr key={i}>\r\n                        <td>\r\n                            <Input\r\n                                value={item.value}\r\n                                type=\"number\"\r\n                                onChange={(e) => handleValueChange(+e.target.value, i)}\r\n                            />\r\n                        </td>\r\n\r\n                        <td>\r\n                            <Input\r\n                                value={item.label}\r\n                                onChange={(e) => handleLabelChange(e.target.value, i)}\r\n                            />\r\n                        </td>\r\n\r\n                        <td>\r\n                            <Button\r\n                                onClick={() => handleDelete(i)}\r\n                                danger\r\n                            >\r\n                                Удалить\r\n                            </Button>\r\n                        </td>\r\n                    </tr>\r\n                )}\r\n\r\n                <tr>\r\n                    <td>\r\n                        <Input\r\n                            value={element.value}\r\n                            type=\"number\"\r\n                            onChange={(e) => setElement({value: +e.target.value, label: element.label})}\r\n                        />\r\n                    </td>\r\n\r\n                    <td>\r\n                        <Input\r\n                            value={element.label}\r\n                            onChange={(e) => setElement({value: element.value, label: e.target.value})}\r\n                        />\r\n                    </td>\r\n\r\n                    <td>\r\n                        <Button\r\n                            onClick={handleAddElement}\r\n                        >\r\n                            Добавить\r\n                        </Button>\r\n                    </td>\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DataTable;","import { Button, Input }   from 'antd';\r\nimport x                   from 'dom-to-image';\r\nimport React, { useState } from 'react';\r\n\r\nconst Download = () => {\r\n    const [name, setName] = useState('funnel');\r\n\r\n    const handleDownload = () => {\r\n        const node = document.getElementById('funnelCanvas');\r\n\r\n        x.toPng(node!)\r\n         .then(function (dataUrl: string) {\r\n             let a = document.createElement('a');\r\n             a.href = dataUrl;\r\n             a.download = `${name}.png`;\r\n             a.click()\r\n         });\r\n    }\r\n\r\n    return (\r\n        <div className=\"download-funnel\">\r\n            <Button onClick={handleDownload}>\r\n                Скачать\r\n            </Button>\r\n            <Input\r\n                onChange={(e) => setName(e.target.value)}\r\n                value={name}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Download;","import React             from 'react';\r\nimport { ColorEdit }     from '../components';\r\nimport { FunnelElement } from './funnel';\r\n\r\ninterface Props {\r\n    item?: FunnelElement,\r\n    index?: number,\r\n    onChange: (element: FunnelElement, index: number) => void\r\n}\r\n\r\nconst EditableElement = ({ item, index, onChange }: Props) => {\r\n    if (!item) return null;\r\n\r\n    const colorChange = ({ color, field }: { color: string | null, field: string }) => {\r\n        const newItem: FunnelElement = { ...item };\r\n        newItem[field] = color;\r\n\r\n        onChange(newItem, index!);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>\r\n                Настройки элемента\r\n            </h2>\r\n\r\n            <ColorEdit\r\n                label={'Цвет элемента'}\r\n                onChange={(data) => colorChange({ color: data.hex, field: 'bgColor' })}\r\n                value={item.bgColor || null}\r\n                clear=\"Сбросить\"\r\n            />\r\n\r\n            <ColorEdit\r\n                label={'Цвет текста'}\r\n                onChange={(data) => colorChange({ color: data.hex, field: 'textColor' })}\r\n                value={item.textColor || null}\r\n                clear=\"Сбросить\"\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default EditableElement;","import { Input }                      from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ColorEdit, FormSlider }      from '../components';\r\nimport CanvasFunnel                   from './CanvasFunnel';\r\nimport DataTable                      from './DataTable';\r\nimport Download                       from './Download';\r\nimport EditableElement                from './EditableElement';\r\nimport { Funnel, FunnelElement }      from './funnel.d';\r\n\r\nconst FunnelWrapper = () => {\r\n    const [funnel, setFunnel] = useState<Funnel[]>([\r\n        { value: 3232, label: 'Зашли на сайт' },\r\n        { value: 1244, label: 'Добавили в корзину' },\r\n        { value: 540, label: 'Купили' }\r\n    ]);\r\n\r\n    const [baseWidth, setBaseWidth] = useState(500);\r\n    const [lastWidth, setLastWidth] = useState(250);\r\n    const [baseHeight, setBaseHeight] = useState(60);\r\n    const [itemColor, setItemColor] = useState<null | string>('#fee600');\r\n    const [bgColor, setBgColor] = useState<null | string>(null);\r\n    const [bgPadding, setBgPadding] = useState(16);\r\n    const [marginBetween, setMargin] = useState(0);\r\n    const [innerFontSize, setInnerFontSize] = useState(20);\r\n    const [title, setTitle] = useState('Посетители за неделю');\r\n    const [funnelElements, setFunnelElements] = useState();\r\n    const [editableElement, setEditableElement] = useState<number | null>(null);\r\n\r\n    const baseX = bgPadding + 100;\r\n    const baseY = bgPadding + (title ? innerFontSize * 2 : 0);\r\n    const minusWidth = (baseWidth - lastWidth) / (funnel.length + 2);\r\n\r\n    useEffect(() => {\r\n        transform();\r\n    }, [funnel, baseWidth, lastWidth, baseHeight, itemColor, bgColor, bgPadding, marginBetween, innerFontSize, title]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function transform() {\r\n        let items: FunnelElement[] = [];\r\n\r\n        funnel.forEach((item, i) => {\r\n            const currentMargin = i * marginBetween;\r\n\r\n            items.push({\r\n                value: item.value,\r\n                label: item.label,\r\n                point1: {\r\n                    x: baseX + (minusWidth * i) + currentMargin / 2,\r\n                    y: baseY + i * baseHeight + currentMargin\r\n                },\r\n                point2: {\r\n                    x: baseX + (baseWidth - (minusWidth * i)) - currentMargin / 2,\r\n                    y: baseY + i * baseHeight + currentMargin\r\n                },\r\n                point3: {\r\n                    x: baseX + (baseWidth - (minusWidth * (i + 1))) - currentMargin / 2,\r\n                    y: baseY + baseHeight + i * baseHeight + currentMargin\r\n                },\r\n                point4: {\r\n                    x: baseX + (minusWidth * (i + 1)) + currentMargin / 2,\r\n                    y: baseY + baseHeight + i * baseHeight + currentMargin\r\n                }\r\n            });\r\n        });\r\n\r\n        setFunnelElements(items);\r\n    }\r\n\r\n    const getStyle = () => {\r\n        return {\r\n            baseHeight,\r\n            baseWidth,\r\n            bgPadding,\r\n            bgColor,\r\n            itemColor: itemColor!,\r\n            marginBetween,\r\n            lastWidth,\r\n            innerFontSize,\r\n            title,\r\n            baseX,\r\n            baseY\r\n        }\r\n    }\r\n\r\n    const handleUpdateElement = (element: FunnelElement, index: number) => {\r\n        const elements = [...funnelElements];\r\n        elements[index] = element;\r\n        setFunnelElements(elements);\r\n    }\r\n\r\n    return (\r\n        <div className=\"funnel__wrapper\">\r\n            <div className=\"funnel__settings\">\r\n                {(editableElement !== null) &&\r\n                <EditableElement\r\n                    index={editableElement}\r\n                    item={funnelElements[editableElement]}\r\n                    onChange={handleUpdateElement}\r\n                />\r\n                }\r\n\r\n                <h2>\r\n                    Настройки воронки\r\n                </h2>\r\n\r\n                <div className=\"form__group\">\r\n                    <label className=\"label\">\r\n                        Заголовок\r\n                    </label>\r\n                    <Input\r\n                        onChange={(e) => setTitle(e.target.value)}\r\n                        value={title}\r\n                        placeholder=\"Заголовок\"\r\n                    />\r\n                </div>\r\n\r\n                <FormSlider\r\n                    max={100}\r\n                    min={0}\r\n                    value={bgPadding}\r\n                    label={'Внутренние отступы'}\r\n                    onChange={setBgPadding}\r\n                />\r\n                <FormSlider\r\n                    max={100}\r\n                    min={0}\r\n                    value={marginBetween}\r\n                    label={'Отступы между элементами'}\r\n                    onChange={setMargin}\r\n                />\r\n                <FormSlider\r\n                    max={36}\r\n                    min={12}\r\n                    value={innerFontSize}\r\n                    label={'Размер текста в элементах'}\r\n                    onChange={setInnerFontSize}\r\n                />\r\n                <FormSlider\r\n                    max={1000}\r\n                    min={100}\r\n                    value={baseWidth}\r\n                    label={'Ширина первого элемента'}\r\n                    onChange={setBaseWidth}\r\n                />\r\n                <FormSlider\r\n                    max={1000}\r\n                    min={100}\r\n                    value={lastWidth}\r\n                    label={'Ширина последнего элемента'}\r\n                    onChange={setLastWidth}\r\n                />\r\n                <FormSlider\r\n                    max={150}\r\n                    min={10}\r\n                    value={baseHeight}\r\n                    label={'Высота элементов'}\r\n                    onChange={setBaseHeight}\r\n                />\r\n\r\n                <ColorEdit\r\n                    label={'Базовый цвет элементов'}\r\n                    value={itemColor}\r\n                    onChange={(data) => setItemColor(data.hex)}\r\n                />\r\n\r\n                <ColorEdit\r\n                    label={'Цвет фона'}\r\n                    value={bgColor}\r\n                    onChange={(data) => setBgColor(data.hex)}\r\n                    clear=\"Убрать фон\"\r\n                />\r\n            </div>\r\n\r\n            <div className=\"funnel__inner\">\r\n                <DataTable\r\n                    items={funnel}\r\n                    onChange={(items) => setFunnel(items)}\r\n                />\r\n\r\n                <CanvasFunnel\r\n                    items={funnel}\r\n                    style={getStyle()}\r\n                    funnelElements={funnelElements}\r\n                    setEditableElement={setEditableElement}\r\n                    editableElement={editableElement}\r\n                />\r\n\r\n                <Download/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FunnelWrapper;","import React from 'react';\r\nimport './styles/app.scss';\r\nimport Funnel from './modules/funnel';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Funnel />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'antd/dist/antd.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}